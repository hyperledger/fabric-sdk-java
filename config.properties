#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
## The timeout for a  proposal requests to endorser in milliseconds.
#org.hyperledger.fabric.sdk.proposal.wait.time = 20000
## Time in milliseconds to wait for genesis block
#org.hyperledger.fabric.sdk.channel.genesisblock_wait_time=5000
## Time that events that are not being handled are cleaned up. This should never need to be changed.
# org.hyperledger.fabric.sdk.client.transaction_cleanup_up_timeout_wait_time=600000
## Time waited between some orderer reties in ms.
#org.hyperledger.fabric.sdk.orderer_retry.wait_time=200
## The time the peer event registration waits for first failure in ms
#org.hyperledger.fabric.sdk.peer.eventRegistration.wait_time=5000
## The time the event hub waits to reconnect in ms
#EVENTHUB_CONNECTION_WAIT_TIME=5000
## The number of unsuccessful attempts by the eventhub  to reconnect before another warning is issued. Set to -1 for none.
#EVENTHUB_RECONNECTION_WARNING_RATE=50
## The number of unsuccessful attempts by the peer eventing service  to reconnect before another warning is issued. Set to -1 for none.
#PEER_EVENT_RECONNECTION_WARNING_RATE=50
## The time the peer eventing service wait to retry to connect in ms.
#org.hyperledger.fabric.sdk.peer.retry_wait_time=500
## The time to wait get the genesis block in ms.  Usually needed to join the peer to a channel.
#org.hyperledger.fabric.sdk.channel.genesisblock_wait_time=5000
## Limits logging of some long strings to this many characters.
#org.hyperledger.fabric.sdk.log.stringlengthmax=64;
## Setting this to 10 or higher produce larger amounts of logging. Seldom beneficial.
#org.hyperledger.fabric.sdk.log.extraloglevel=10
## Quick way to set apache log4j setting. Default is not to set anything (null). Default for Apache log file is INFO. Can be
## TRACE, DEBUG, INFO, WARN, ERROR
#org.hyperledger.fabric.sdk.loglevel=null
## If true the SDK will perform a check on the endorsed proposals to guarantee they are consistent. This will be checked by the endorsing peers
## prior to committing the block and will fail regardless.
#org.hyperledger.fabric.sdk.proposal.consistency_validation=true
## Default ssl provider on grpc connections  (openSSL, JDK)
#org.hyperledger.fabric.sdk.connections.ssl.sslProvider=openSSL
## Default negotiation type for grpc ssl connections. (TLS, plainText)
#org.hyperledger.fabric.sdk.connections.ssl.negotiationType=TLS

# System wide defaults for CryptoPrimitives objects. You can customize further by using the
# CryptoPrimitives.setProperties() method.
# If you change any of these values, please coordinate with the Fabric and Fabric-ca administrators as they
#will need to change peer and orderer configurations as well
#
# security level determines the elliptic curve used to generate keys. Valid values are 256 ( curve is P-256 )
# and 384 ( curve is secp384r1 )
# org.hyperledger.fabric.sdk.crypto.security_level = 256
# hash algorithm determines the message digest used when creating a signature. Valid values are
# SHA2 ( digest is SHA-256 ) and SHA3 ( digest is SHA-3 )
#org.hyperledger.fabric.sdk.crypto.hash_algorithm = SHA2
# The format for the certificate PEM files used by the SDK, Fabric and Fabric-ca components.
# currently X.509 is the only valid format supported. This entry is here to allow for future support
# org.hyperledger.fabric.sdk.crypto.certificate_format = X.509
# The algorithm used to generate a signature. Valid values are listed in the JCA Standard Algorithm Name Documentation
# e.g. http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Signature
# org.hyperledger.fabric.sdk.crypto.default_signature_algorithm = SHA256withECDSA
