version: '2'
services:
  peer-base:
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=sdkintegration_default
#     - CORE_LOGGING_LEVEL=ERROR
      # - FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_SPEC=DEBUG:lifecycle=DEBUG:gossip=INFO:msp.identity=INFO:leveldbhelper=INFO
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_CHANNELSERVICE_ENABLED=true
      - CORE_CHAINCODE_STARTUPTIMEOUT=10m  # only cause our vms are so slow!
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s # Allow more time for chaincode container to build on install
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/msp
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=${ORG_HYPERLEDGER_FABRIC_SDKTEST_INTEGRATIONTESTS_TLS}
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED=${ORG_HYPERLEDGER_FABRIC_SDKTEST_INTEGRATIONTESTS_CLIENT_AUTH_REQUIRED}
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/msp/peer/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/msp/peer/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/msp/peer/tls/ca.crt

      # NOTE BOTH below should never be used in production.
      - CORE_PEER_AUTHENTICATION_TIMEWINDOW=3600s
      - CORE_PEER_EVENTS_TIMEWINDOW=3600s

      - CORE_CHAINCODE_BUILDER=hyperledger/fabric-ccenv
      - CORE_CHAINCODE_GOLANG_RUNTIME=hyperledger/fabric-baseos
      - CORE_CHAINCODE_JAVA_RUNTIME=hyperledger/fabric-javaenv
      - CORE_CHAINCODE_NODE_RUNTIME=hyperledger/fabric-nodeenv
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
